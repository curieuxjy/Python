days_in_month(reserve_tb$reserve_datetime_ct)
reserve_tb$reserve_datetime_lt$mday
# 요일（0=일요일、1＝월요일）을 수치로얻음
wday(reserve_tb$reserve_datetime_ct)
reserve_tb$reserve_datetime_lt$wday
# 요일을 문자열로 얻음
weekdays(reserve_tb$reserve_datetime_ct)
# 시각 정보의 시를 얻음
hour(reserve_tb$reserve_datetime_ct)
reserve_tb$reserve_datetime_lt$hour
# 시각 정보의 분을 얻음
minute(reserve_tb$reserve_datetime_ct)
reserve_tb$reserve_datetime_lt$min
# 시각 정보의 초를 얻음
second(reserve_tb$reserve_datetime_ct)
reserve_tb$reserve_datetime_lt$sec
# 지정한 포맷의 문자열로 변환
format(reserve_tb$reserve_datetime_ct, '%Y-%m-%d %H:%M:%S')
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
library(lubridate)
# reserve_datetime을 POSIXct형으로 변환
reserve_tb$reserve_datetime <-
as.POSIXct(reserve_tb$reserve_datetime, orders='%Y-%m-%d %H:%M:%S')
# checkin_datetime을 POSIXct형으로 변환
reserve_tb$checkin_datetime <-
as.POSIXct(paste(reserve_tb$checkin_date, reserve_tb$checkin_time),
format='%Y-%m-%d %H:%M:%S')
# 년도의 차이를 계산(월 이하의 일시 요소는 고려하지 않음)
year(reserve_tb$checkin_datetime_lt) - year(reserve_tb$reserve_datetime)
# 월의 차이를 계산(일 이하의 일시 요소는 고려하지 않음)
(year(reserve_tb$checkin_datetime) * 12
+ month(reserve_tb$checkin_datetime)) -
(year(reserve_tb$reserve_datetime) * 12
+ month(reserve_tb$reserve_datetime))
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
library(lubridate)
# reserve_datetime을 POSIXct형으로 변환
reserve_tb$reserve_datetime <-
as.POSIXct(reserve_tb$reserve_datetime, orders='%Y-%m-%d %H:%M:%S')
# checkin_datetime을 POSIXct형으로 변환
reserve_tb$checkin_datetime <-
as.POSIXct(paste(reserve_tb$checkin_date, reserve_tb$checkin_time),
format='%Y-%m-%d %H:%M:%S')
# 년도의 차이를 계산(월 이하의 일시 요소는 고려하지 않음)
year(reserve_tb$checkin_datetime_lt) - year(reserve_tb$reserve_datetime)
# 년도의 차이를 계산(월 이하의 일시 요소는 고려하지 않음)
year(reserve_tb$checkin_datetime_lt) - year(reserve_tb$reserve_datetime)
# 월의 차이를 계산(일 이하의 일시 요소는 고려하지 않음)
(year(reserve_tb$checkin_datetime) * 12
+ month(reserve_tb$checkin_datetime)) -
(year(reserve_tb$reserve_datetime) * 12
+ month(reserve_tb$reserve_datetime))
# 일 단위로 차이를 계산
difftime(reserve_tb$checkin_datetime, reserve_tb$reserve_datetime,
units='days')
# 시간 단위로 차이를 계산
difftime(reserve_tb$checkin_datetime, reserve_tb$reserve_datetime,
units='hours')
# 분단위로 차이를 계산
difftime(reserve_tb$checkin_datetime, reserve_tb$reserve_datetime,
units='mins')
# 초단위로 차이를 계산
difftime(reserve_tb$checkin_datetime, reserve_tb$reserve_datetime,
units='secs')
# 년도의 차이를 계산(월 이하의 일시 요소는 고려하지 않음)
year(reserve_tb$checkin_datetime_lt) - year(reserve_tb$reserve_datetime)
debugSource('~/Documents/awesomebook-master/preprocess/010_datetime/03/r_awesome.R')
function (x)
UseMethod("year")
function (x)
as.POSIXlt(x, tz = tz(x))$year + 1900
function (x, tz = "", ...)
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
library(lubridate)
# reserve_datetime을 POSIXct형으로 변환
reserve_tb$reserve_datetime <-
as.POSIXct(reserve_tb$reserve_datetime, orders='%Y-%m-%d %H:%M:%S')
# checkin_datetime을 POSIXct형으로 변환
reserve_tb$checkin_datetime <-
as.POSIXct(paste(reserve_tb$checkin_date, reserve_tb$checkin_time),
format='%Y-%m-%d %H:%M:%S')
# 년도의 차이를 계산(월 이하의 일시 요소는 고려하지 않음)
year(reserve_tb$checkin_datetime_lt) - year(reserve_tb$reserve_datetime)
# 월의 차이를 계산(일 이하의 일시 요소는 고려하지 않음)
(year(reserve_tb$checkin_datetime) * 12
+ month(reserve_tb$checkin_datetime)) -
(year(reserve_tb$reserve_datetime) * 12
+ month(reserve_tb$reserve_datetime))
# 일 단위로 차이를 계산
difftime(reserve_tb$checkin_datetime, reserve_tb$reserve_datetime,
units='days')
# 시간 단위로 차이를 계산
difftime(reserve_tb$checkin_datetime, reserve_tb$reserve_datetime,
units='hours')
# 분단위로 차이를 계산
difftime(reserve_tb$checkin_datetime, reserve_tb$reserve_datetime,
units='mins')
# 초단위로 차이를 계산
difftime(reserve_tb$checkin_datetime, reserve_tb$reserve_datetime,
units='secs')
source('~/Documents/awesomebook-master/preprocess/010_datetime/03/r_awesome.R')
debugSource('~/Documents/awesomebook-master/preprocess/010_datetime/03/r_awesome.R')
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
library(lubridate)
# reserve_datetime을 POSIXct형으로 변환
reserve_tb$reserve_datetime <-
as.POSIXct(reserve_tb$reserve_datetime, orders='%Y-%m-%d %H:%M:%S')
# checkin_datetime을 POSIXct형으로 변환
reserve_tb$checkin_datetime <-
as.POSIXct(paste(reserve_tb$checkin_date, reserve_tb$checkin_time),
format='%Y-%m-%d %H:%M:%S')
# 년도의 차이를 계산(월 이하의 일시 요소는 고려하지 않음)
year(reserve_tb$checkin_datetime) - year(reserve_tb$reserve_datetime)
# 월의 차이를 계산(일 이하의 일시 요소는 고려하지 않음)
(year(reserve_tb$checkin_datetime) * 12
+ month(reserve_tb$checkin_datetime)) -
(year(reserve_tb$reserve_datetime) * 12
+ month(reserve_tb$reserve_datetime))
# 일 단위로 차이를 계산
difftime(reserve_tb$checkin_datetime, reserve_tb$reserve_datetime,
units='days')
# 시간 단위로 차이를 계산
difftime(reserve_tb$checkin_datetime, reserve_tb$reserve_datetime,
units='hours')
# 분단위로 차이를 계산
difftime(reserve_tb$checkin_datetime, reserve_tb$reserve_datetime,
units='mins')
# 초단위로 차이를 계산
difftime(reserve_tb$checkin_datetime, reserve_tb$reserve_datetime,
units='secs')
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
library(lubridate)
# reserve_datetime을 POSIXct형으로 변환
reserve_tb$reserve_datetime <-
as.POSIXct(reserve_tb$reserve_datetime, orders='%Y-%m-%d %H:%M:%S')
# reserve_date을 Date형으로 변환
reserve_tb$reserve_date <-
as.Date(reserve_tb$reserve_datetime, format='%Y-%m-%d')
# reserve_datetime에 1일 더한다
reserve_tb$reserve_datetime + days(1)
# reserve_datetime에 1시간 더한다
reserve_tb$reserve_datetime + hours(1)
# reserve_datetime에 1분 더한다
reserve_tb$reserve_datetime + minutes(1)
# reserve_datetime에 1초 더한다
reserve_tb$reserve_datetime + seconds(1)
# reserve_date에 1일 더한다
reserve_tb$reserve_date + days(1)
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
# reserve_datetime을 POSIXct형으로 변환
reserve_tb$reserve_datetime_ct <-
as.POSIXct(reserve_tb$reserve_datetime, orders='%Y-%m-%d %H:%M:%S')
# 월의 숫자를 계절로 변환하는 함수(mutate 함수안에 직접 작성하는것도 가능)
to_season <- function(month_num){
case_when(
month_num >= 3 & month_num < 6  ~ 'spring',
month_num >= 6 & month_num < 9  ~ 'summer',
month_num >= 9 & month_num < 12 ~ 'autumn',
TRUE                            ~ 'winter'
)
}
# 계절로 변환
reserve_tb <-
reserve_tb %>%
mutate(reserve_datetime_season=to_season(month(reserve_datetime_ct)))
# 카테고리 형으로 변환
reserve_tb$reserve_datetime_season <-
factor(reserve_tb$reserve_datetime_season,
levels=c('spring', 'summer', 'autumn', 'winter'))
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
# reserve_datetime을 POSIXlt형으로 변환
reserve_tb$reserve_datetime_lt <-
as.POSIXlt(reserve_tb$reserve_datetime, format='%Y-%m-%d %H:%M:%S')
# 월의 숫자를 계절로 변환하는 함수
to_season <-function(month_num){
case_when(
month_num >= 3 & month_num < 6  ~ 'spring',
month_num >= 6 & month_num < 9  ~ 'summer',
month_num >= 9 & month_num < 12 ~ 'autumn',
TRUE                            ~ 'winter'
)
}
# 계절로 변환
reserve_tb$reserve_datetime_season <-
sapply(reserve_tb$reserve_datetime_lt$mon, to_season)
# 카테고리형으로 변환
reserve_tb$reserve_datetime_season <-
factor(reserve_tb$reserve_datetime_season,
levels=c('spring', 'summer', 'autumn', 'winter'))
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
load_holiday_mst()
# 아래 부터 책에 게재
# 휴일 마스터와 결함
inner_join(reserve_tb, holiday_mst, by=c('checkin_date'='target_day'))
install.packages("sp")
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
# Spatial 오브젝트를 다루기 위한 sp 패키지 로드
library(sp)
# 대상 고객의 테이블에서 집의 위도 경도를 구함
home_locations <- customer_tb %>% select(home_longitude, home_latitude)
# 분 초를 도로 변환하는 함수 정의
convert_to_continuous <- function(x){
x_min <- (x * 100 - as.integer(x * 100)) * 100
x_sec <- (x - as.integer(x) - x_min / 10000) * 100
return(as.integer(x) + x_sec / 60 + x_min / 60 / 60)
}
# 분 초를 도로 변환
home_locations['home_longitude'] <-
sapply(home_locations['home_longitude'], convert_to_continuous)
home_locations['home_latitude'] <-
sapply(home_locations['home_latitude'], convert_to_continuous)
# Spatial 오브젝트(위도, 경도값을 가지는 데이터형)로 변환
coordinates(home_locations) <- c('home_longitude', 'home_latitude')
# 한국 측지계 설정
# 지면 관계상 문장을 분할 하여 pasete0 함수로 연결
proj4string(home_locations) <-CRS(
paste0('+proj=longlat +ellps=bessel ',
'+towgs84=-146.336,506.832,680.254,0,0,0,0 +no_defs')
)
# 세계 측지계(WGS84)로 변환
# rgdal 패키지를 spTransform 함수 내부에서 이용
home_locations <-
spTransform(home_locations,
CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# data.frame으로 변환
home_locations <- data.frame(home_locations)
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
# Spatial 오브젝트를 다루기 위한 sp 패키지 로드
library(sp)
# 대상 고객의 테이블에서 집의 위도 경도를 구함
home_locations <- customer_tb %>% select(home_longitude, home_latitude)
# 분 초를 도로 변환하는 함수 정의
convert_to_continuous <- function(x){
x_min <- (x * 100 - as.integer(x * 100)) * 100
x_sec <- (x - as.integer(x) - x_min / 10000) * 100
return(as.integer(x) + x_sec / 60 + x_min / 60 / 60)
}
# 분 초를 도로 변환
home_locations['home_longitude'] <-
sapply(home_locations['home_longitude'], convert_to_continuous)
home_locations['home_latitude'] <-
sapply(home_locations['home_latitude'], convert_to_continuous)
# Spatial 오브젝트(위도, 경도값을 가지는 데이터형)로 변환
coordinates(home_locations) <- c('home_longitude', 'home_latitude')
# 한국 측지계 설정
# 지면 관계상 문장을 분할 하여 pasete0 함수로 연결
proj4string(home_locations) <-CRS(
paste0('+proj=longlat +ellps=bessel ',
'+towgs84=-146.336,506.832,680.254,0,0,0,0 +no_defs')
)
# 세계 측지계(WGS84)로 변환
# rgdal 패키지를 spTransform 함수 내부에서 이용
home_locations <-
spTransform(home_locations,
CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# data.frame으로 변환
home_locations <- data.frame(home_locations)
# customer_tb의 위도 경도를 세계 측지계로 갱산
customer_tb$home_longitude <- home_locations$home_longitude
customer_tb$home_latitude <- home_locations$home_latitude
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
# Spatial 오브젝트를 다루기 위한 sp 패키지 로드
library(sp)
# 대상 고객의 테이블에서 집의 위도 경도를 구함
home_locations <- customer_tb %>% select(home_longitude, home_latitude)
# 분 초를 도로 변환하는 함수 정의
convert_to_continuous <- function(x){
x_min <- (x * 100 - as.integer(x * 100)) * 100
x_sec <- (x - as.integer(x) - x_min / 10000) * 100
return(as.integer(x) + x_sec / 60 + x_min / 60 / 60)
}
# 분 초를 도로 변환
home_locations['home_longitude'] <-
sapply(home_locations['home_longitude'], convert_to_continuous)
home_locations['home_latitude'] <-
sapply(home_locations['home_latitude'], convert_to_continuous)
# Spatial 오브젝트(위도, 경도값을 가지는 데이터형)로 변환
coordinates(home_locations) <- c('home_longitude', 'home_latitude')
# 한국 측지계 설정
# 지면 관계상 문장을 분할 하여 pasete0 함수로 연결
proj4string(home_locations) <-CRS(
paste0('+proj=longlat +ellps=bessel ',
'+towgs84=-146.336,506.832,680.254,0,0,0,0 +no_defs')
)
# 세계 측지계(WGS84)로 변환
# rgdal 패키지를 spTransform 함수 내부에서 이용
home_locations <-
spTransform(home_locations,
CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# data.frame으로 변환
home_locations <- data.frame(home_locations)
# customer_tb의 위도 경도를 세계 측지계로 갱산
customer_tb$home_longitude <- home_locations$home_longitude
customer_tb$home_latitude <- home_locations$home_latitude
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
# Spatial 오브젝트를 다루기 위한 sp 패키지 로드
library(sp)
# 대상 고객의 테이블에서 집의 위도 경도를 구함
home_locations <- customer_tb %>% select(home_longitude, home_latitude)
# 분 초를 도로 변환하는 함수 정의
convert_to_continuous <- function(x){
x_min <- (x * 100 - as.integer(x * 100)) * 100
x_sec <- (x - as.integer(x) - x_min / 10000) * 100
return(as.integer(x) + x_sec / 60 + x_min / 60 / 60)
}
# 분 초를 도로 변환
home_locations['home_longitude'] <-
sapply(home_locations['home_longitude'], convert_to_continuous)
home_locations['home_latitude'] <-
sapply(home_locations['home_latitude'], convert_to_continuous)
# Spatial 오브젝트(위도, 경도값을 가지는 데이터형)로 변환
coordinates(home_locations) <- c('home_longitude', 'home_latitude')
# 한국 측지계 설정
# 지면 관계상 문장을 분할 하여 pasete0 함수로 연결
proj4string(home_locations) <-CRS(
paste0('+proj=longlat +ellps=bessel ',
'+towgs84=-146.336,506.832,680.254,0,0,0,0 +no_defs')
)
# 세계 측지계(WGS84)로 변환
# rgdal 패키지를 spTransform 함수 내부에서 이용
home_locations <-
spTransform(home_locations,
CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# data.frame으로 변환
home_locations <- data.frame(home_locations)
# customer_tb의 위도 경도를 세계 측지계로 갱산
customer_tb$home_longitude <- home_locations$home_longitude
customer_tb$home_latitude <- home_locations$home_latitude
install.packages("rgdal")
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
# Spatial 오브젝트를 다루기 위한 sp 패키지 로드
library(sp)
library(rgdal)
# 대상 고객의 테이블에서 집의 위도 경도를 구함
home_locations <- customer_tb %>% select(home_longitude, home_latitude)
# 분 초를 도로 변환하는 함수 정의
convert_to_continuous <- function(x){
x_min <- (x * 100 - as.integer(x * 100)) * 100
x_sec <- (x - as.integer(x) - x_min / 10000) * 100
return(as.integer(x) + x_sec / 60 + x_min / 60 / 60)
}
# 분 초를 도로 변환
home_locations['home_longitude'] <-
sapply(home_locations['home_longitude'], convert_to_continuous)
home_locations['home_latitude'] <-
sapply(home_locations['home_latitude'], convert_to_continuous)
# Spatial 오브젝트(위도, 경도값을 가지는 데이터형)로 변환
coordinates(home_locations) <- c('home_longitude', 'home_latitude')
# 한국 측지계 설정
# 지면 관계상 문장을 분할 하여 pasete0 함수로 연결
proj4string(home_locations) <-CRS(
paste0('+proj=longlat +ellps=bessel ',
'+towgs84=-146.336,506.832,680.254,0,0,0,0 +no_defs')
)
# 세계 측지계(WGS84)로 변환
# rgdal 패키지를 spTransform 함수 내부에서 이용
home_locations <-
spTransform(home_locations,
CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# data.frame으로 변환
home_locations <- data.frame(home_locations)
# customer_tb의 위도 경도를 세계 측지계로 갱산
customer_tb$home_longitude <- home_locations$home_longitude
customer_tb$home_latitude <- home_locations$home_latitude
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# 아래 부터 책에 게재
# Spatial 오브젝트를 다루기 위한 sp 패키지 로드
library(sp)
library(rgdal)
# 대상 고객의 테이블에서 집의 위도 경도를 구함
home_locations <- customer_tb %>% select(home_longitude, home_latitude)
# 분 초를 도로 변환하는 함수 정의
convert_to_continuous <- function(x){
x_min <- (x * 100 - as.integer(x * 100)) * 100
x_sec <- (x - as.integer(x) - x_min / 10000) * 100
return(as.integer(x) + x_sec / 60 + x_min / 60 / 60)
}
# 분 초를 도로 변환
home_locations['home_longitude'] <-
sapply(home_locations['home_longitude'], convert_to_continuous)
home_locations['home_latitude'] <-
sapply(home_locations['home_latitude'], convert_to_continuous)
# Spatial 오브젝트(위도, 경도값을 가지는 데이터형)로 변환
coordinates(home_locations) <- c('home_longitude', 'home_latitude')
# 한국 측지계 설정
# 지면 관계상 문장을 분할 하여 pasete0 함수로 연결
proj4string(home_locations) <-CRS(
paste0('+proj=longlat +ellps=bessel ',
'+towgs84=-146.336,506.832,680.254,0,0,0,0 +no_defs')
)
# 세계 측지계(WGS84)로 변환
# rgdal 패키지를 spTransform 함수 내부에서 이용
home_locations <-
spTransform(home_locations,
CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# data.frame으로 변환
home_locations <- data.frame(home_locations)
# customer_tb의 위도 경도를 세계 측지계로 갱산
customer_tb$home_longitude <- home_locations$home_longitude
customer_tb$home_latitude <- home_locations$home_latitude
install.packages("geosphere")
library(dplyr)
source('preprocess/load_data/data_loader.R')
load_hotel_reserve()
# Spatial 오브젝트를 다루기 위한 sp 패키지 로드
library(sp)
# 대상 고객 테이블의 집의 위도, 경도 얻기
home_locations <- customer_tb %>% select(home_longitude, home_latitude)
# 분,초를 도로 변환하는 함수 정의
convert_to_continuous <- function(x){
x_min <- (x * 100 - as.integer(x * 100)) * 100
x_sec <- (x - as.integer(x) - x_min / 10000) * 100
return(as.integer(x) + x_sec / 60 + x_min / 60 / 60)
}
# 분, 초를 도로 변환
home_locations['home_longitude'] <-
sapply(home_locations['home_longitude'], convert_to_continuous)
home_locations['home_latitude'] <-
sapply(home_locations['home_latitude'], convert_to_continuous)
# Spatial 오브젝트(위도 경도의 데이터형 )로 변환
coordinates(home_locations) <- c('home_longitude', 'home_latitude')
# 동경 측지계 설정
# 서식 떄문에 문장을 분할 하여 pasete0 함수로 연결
proj4string(home_locations) <-CRS(
paste0('+proj=longlat +ellps=bessel ',
'+towgs84=-146.336,506.832,680.254,0,0,0,0 +no_defs')
)
# 세계 측지계로 변환
# rgdal 패키지를 spTransform 함수에서 이용
home_locations <-
spTransform(home_locations,
CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# data.frame으로 변환
home_locations <- data.frame(home_locations)
# customer_tb의 위도 경도를 세계 측지계로 갱신
customer_tb$home_longitude <- home_locations$home_longitude
customer_tb$home_latitude <- home_locations$home_latitude
# 아래 부터 책에 게재
library(geosphere)
# 예약 테이블에 고객 테이블과 호텔 테이블을 결합
reserve_all_tb <- inner_join(reserve_tb, hotel_tb, by='hotel_id')
reserve_all_tb <- inner_join(reserve_all_tb, customer_tb, by='customer_id')
# 방위각 계산
bearing(reserve_all_tb[, c('home_longitude', 'home_latitude')],
reserve_all_tb[, c('hotel_longitude', 'hotel_latitude')])
# Haversin식으로 거리 계산
distHaversine(reserve_all_tb[, c('home_longitude', 'home_latitude')],
reserve_all_tb[, c('hotel_longitude', 'hotel_latitude')])
# Vincenty식으로 거리 계산
distVincentySphere(reserve_all_tb[, c('home_longitude', 'home_latitude')],
reserve_all_tb[, c('hotel_longitude', 'hotel_latitude')])
# Hubeny식 함수 정의
distHubeny <- function(x){
a=6378137
b=6356752.314245
e2 <- (a ** 2 - b ** 2) / a ** 2
points <- sapply(x, function(x){return(x * (2 * pi) / 360)})
lon1 <- points[[1]]
lat1 <- points[[2]]
lon2 <- points[[3]]
lat2 <- points[[4]]
w = 1 - e2 * sin((lat1 + lat2) / 2) ** 2
c2 = cos((lat1 + lat2) / 2) ** 2
return(sqrt((b ** 2 / w ** 3) * (lat1 - lat2) ** 2
+ (a ** 2 / w) * c2 * (lon1 - lon2) ** 2))
}
# Hubeny식으로 거리 계산
apply(
reserve_all_tb[, c('home_longitude', 'home_latitude',
'hotel_longitude', 'hotel_latitude')],
distHubeny, MARGIN=1
)
